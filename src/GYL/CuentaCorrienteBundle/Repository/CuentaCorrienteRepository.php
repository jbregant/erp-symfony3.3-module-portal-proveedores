<?php

namespace GYL\CuentaCorrienteBundle\Repository;

use Doctrine\ORM\EntityManager;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;

/**
 * CuentaCorrienteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CuentaCorrienteRepository
{

    /**
     * @var EntityManager
     */
    private $entityManager;

    /**
     * @var Container
     */
    private $container;

    /**
     * @param Container $container
     */
    public function __construct(Container $container)
    {
        $this->container = $container;
        $this->entityManager = $container->get("doctrine")->getManager('adif_contable');
    }

    /**
     * @return EntityManager
     */
    public function getEntityManager()
    {
        return $this->entityManager;
    }

    /**
     * @return \Doctrine\DBAL\Connection
     */
    public function getConnection()
    {
        return $this->getEntityManager()->getConnection();
    }

    /**
     * Obtener movimientos de la cuenta corriente del proveedor
     *
     * @param idProveedor
     * @return array
     */
    public function getCuentaCorriente($idProveedor, $user)
    {

        $orden = array(
            'Nota débito'   => 0,
            'Nota crédito'  => 1,
            'Factura'       => 2,
            'Anticipo'      => 3,
            'Pago parcial'  => 4,
            'Orden de pago' => 5);

        $discriminadores = array(
            'factura',
            'factura_obra',
            'orden_pago_comprobante',
            'orden_pago_obra',
            'nota_credito',
            'nota_credito_obra',
            'nota_debito',
            'nota_debito_obra',
            'ticket_factura');

        $em          = $this->getEntityManager();
        $fechaAlta   = $user->getFechaAlta();
        $fechaSalida = new \DateTime('2017-11-01 00:00:00');

        $query = "SELECT *
                  FROM vw_cc_obras_servicios
                  WHERE id_proveedor = :id_proveedor
                    AND fecha_comprobante >= :fecha_alta
                  ORDER BY grupo, descripcion, id_orden_pago, id_comprobante;";
        $statement = $em->getConnection()->prepare($query);
        $statement->bindValue('id_proveedor', $idProveedor);
        $statement->bindValue('fecha_alta', $fechaAlta->modify('-1 year'), 'datetime');
        $statement->execute();
        $comprobantes = $statement->fetchAll();

        $query = "SELECT *
                  FROM vw_cc_anticipos_aplicados
                  WHERE id_proveedor = :id_proveedor
                    AND fecha_comprobante >= :fecha_alta
                  ORDER BY grupo, descripcion, id_orden_pago, id_comprobante;";
        $statement = $em->getConnection()->prepare($query);
        $statement->bindValue('id_proveedor', $idProveedor);
        $statement->bindValue('fecha_alta', $fechaAlta->modify('-1 year'), 'datetime');
        $statement->execute();
        $anticiposAplicados = $statement->fetchAll();

        $query = "SELECT *
                  FROM vw_cc_anticipos_no_aplicados
                  WHERE id_proveedor = :id_proveedor
                    AND fecha_comprobante >= :fecha_alta
                  ORDER BY grupo, descripcion, id_orden_pago, id_comprobante;";
        $statement = $em->getConnection()->prepare($query);
        $statement->bindValue('id_proveedor', $idProveedor);
        $statement->bindValue('fecha_alta', $fechaAlta->modify('-1 year'), 'datetime');
        $statement->execute();
        $anticipos_no_aplicados = $statement->fetchAll();

        $query = "SELECT *
                  FROM vw_cc_pagos_parciales
                  WHERE id_proveedor = :id_proveedor
                    AND fecha_comprobante >= :fecha_alta
                  ORDER BY grupo, descripcion, id_orden_pago, id_comprobante;";
        $statement = $em->getConnection()->prepare($query);
        $statement->bindValue('id_proveedor', $idProveedor);
        $statement->bindValue('fecha_alta', $fechaAlta->modify('-1 year'), 'datetime');
        $statement->execute();
        $pagosParciales = $statement->fetchAll();

        $registros      = array();
        $saldoGrupo     = 0;
        $saldoOrdenPago = 0;
        $totalOrdenPago = 0;
        $row            = 0;
        $fechaAhora     = new \DateTime('NOW');

        //mientras hayan comprobantes
        while ($row < count($comprobantes)) {

            $mostrarSaldo                  = false;
            $agrupador                     = 0;
            $registro                      = array();
            $registrosComprobantes         = array();
            $registrosPagosParciales       = array();
            $registrosAnticiposAplicados   = array();
            $registrosAnticiposNoAplicados = array();
            $grupo                         = $comprobantes[$row]['grupo'];
            $descripcion                   = $comprobantes[$row]['descripcion'];

            //mientras sea el mismo grupo
            while ($row < count($comprobantes) && $descripcion == $comprobantes[$row]['descripcion']) {

                $idOrdenPago                       = $comprobantes[$row]['id_orden_pago'];
                $numeroOrdenPago                   = str_pad($comprobantes[$row]['numero_orden_pago'], 8, '0', STR_PAD_LEFT);
                $totalOrdenPago                    = $comprobantes[$row]['total_orden_pago'];
                $discriminador                     = $comprobantes[$row]['discriminador'];
                $fechaCreacionOrdenPago            = $comprobantes[$row]['fecha_creacion_orden_pago'];
                $fechaUltimaActualizacionOrdenPago = $comprobantes[$row]['fecha_ultima_actualizacion_orden_pago'];
                $fechaOrdenPago                    = $comprobantes[$row]['fecha_orden_pago'];
                $estadoOrdenPago                   = $comprobantes[$row]['estado_orden_pago'];
                $idEstadoOrdenPago                 = $comprobantes[$row]['id_estado_orden_pago'];
                $saldoOrdenPago += $totalOrdenPago;

                //mientras sea misma OP
                while ($row < count($comprobantes) && $descripcion == $comprobantes[$row]['descripcion'] && intval($idOrdenPago) == intval($comprobantes[$row]['id_orden_pago'])) {

                    $registroAnticiposAplicados = array();
                    $registroPagosParciales     = array();
                    $cantHorasOrdenPago         = 0;
                    $cantDiasComprobante        = 0;
                    $cantDiasOrdenPago          = 0;

                    $dateTimeFechaComprobante                  = new \DateTime($comprobantes[$row]['fecha_ultima_actualizacion_comprobante']);
                    $dateTimeFechaUltimaActualizacionOrdenPago = new \DateTime($fechaUltimaActualizacionOrdenPago);
                    $dateTimeFechaOrdenPago                    = new \DateTime($fechaOrdenPago);
                    $intervalHoras                             = $dateTimeFechaUltimaActualizacionOrdenPago->diff($fechaAhora);
                    $intervalDiasOrdenPago                     = $dateTimeFechaOrdenPago->diff($fechaAhora);
                    $intervalDiasFechaComprobante              = $dateTimeFechaComprobante->diff($fechaAhora);
                    $cantDiasComprobante                       = $intervalDiasFechaComprobante->format('%a');
                    $cantDiasOrdenPago                         = $intervalDiasOrdenPago->format('%a');

                    if ($intervalHoras->format('%a') > 0) {
                        $cantHorasOrdenPago = $intervalHoras->format('%a') * 24;
                    }

                    if ($intervalHoras->format('%h') > 0) {
                        $cantHorasOrdenPago += $intervalHoras->format('%h');
                    }

                    //numero de comprobante
                    if (in_array($comprobantes[$row]['discriminador'], $discriminadores)) {

                        $numero = $comprobantes[$row]['punto_venta'] . '-' .
                            $comprobantes[$row]['letra_comprobante'] . '-' .
                            $comprobantes[$row]['numero_comprobante'];

                    } else {
                        $numero = $comprobantes[$row]['numero_comprobante'];
                    }

                    //si el comprobante está anulado
                    if (intval($comprobantes[$row]['id_estado_comprobante']) == 3) {

                        if ($cantDiasComprobante <= 30) {

                            $mostrarComprobante = true;
                            $mostrarSaldo       = true;

                        } else {
                            $mostrarComprobante = false;
                        }

                        $estadoComprobante = $comprobantes[$row]['estado_comprobante'];

                        //comprobante abierto (factura abierta)
                    } elseif (in_array($comprobantes[$row]['id_estado_comprobante'], array(1, 2)) && intval($idOrdenPago) == 0 ||
                        intval($idOrdenPago) !== 0 && $cantDiasOrdenPago <= 30) {

                        //si OP no está Pagada
                        if (intval($idEstadoOrdenPago) != 4) {

                            //si OP tiene estado 'Pendiente de pago'
                            if (intval($idEstadoOrdenPago) == 3) {
                                $estadoComprobante = 'Aprobada';
                            } else {
                                $estadoComprobante = $comprobantes[$row]['estado_pago'];
                            }

                            if (intval($comprobantes[$row]['total_comprobante']) != 0) {
                                $saldoGrupo += $comprobantes[$row]['total_comprobante'];
                            } else {
                                $saldoGrupo += $comprobantes[$row]['saldo_comprobante'];
                            }

                            //cant horas desde última actualización
                        } elseif ($cantHorasOrdenPago <= 48) {

                            //si el pago es Creado entonces es Aprobada
                            if (intval($comprobantes[$row]['id_estado_pago']) == 1) {
                                $estadoComprobante = 'Aprobada';
                            } else {
                                $estadoComprobante = $comprobantes[$row]['estado_pago'];
                            }

                            if (intval($comprobantes[$row]['total_comprobante']) != 0) {
                                $saldoGrupo += $comprobantes[$row]['total_comprobante'];
                            } else {
                                $saldoGrupo += $comprobantes[$row]['saldo_comprobante'];
                            }

                        } else {
                            $estadoComprobante = null;
                        }

                        $mostrarSaldo       = true;
                        $mostrarComprobante = true;

                    } else {

                        $mostrarComprobante = false;
                        $estadoComprobante  = null;

                    }

                    $registroComprobante = array(
                        'agrupador'        => $agrupador,
                        'idComprobante'    => $comprobantes[$row]['id_comprobante'],
                        'tipo'             => $comprobantes[$row]['tipo_comprobante'],
                        'discriminador'    => $comprobantes[$row]['discriminador'],
                        'orden'            => $orden[$comprobantes[$row]['tipo_comprobante']],
                        'numero'           => $numero,
                        'fechaComprobante' => $comprobantes[$row]['fecha_comprobante'],
                        'fechaIngreso'     => $comprobantes[$row]['fecha_ingreso_comprobante'],
                        'idOrdenPago'      => $comprobantes[$row]['id_orden_pago'],
                        'estado'           => $estadoComprobante,
                        'saldo'            => $comprobantes[$row]['total_comprobante'],
                        'url'              => false,
                        'mostrar'          => $mostrarComprobante);

                    //agregar comprobante
                    $registro[$numeroOrdenPago][] = $registroComprobante;

                    //buscar PP de cada comprobante por idComprobante
                    $keysPagosParciales = array_keys(array_column($pagosParciales, 'id_comprobante'), $comprobantes[$row]['id_comprobante']);
                    foreach ($keysPagosParciales as $key) {

                        $cantHorasPagoParcial = 0;
                        $cantDiasPagoParcial  = 0;

                        $dateTimeFechaUltimaActualizacionPagoParcial = new \DateTime($pagosParciales[$key]['fecha_ultima_actualizacion_orden_pago']);
                        $dateTimeFechaPagoParcial                    = new \DateTime($pagosParciales[$key]['fecha_orden_pago']);
                        $intervalHoras                               = $dateTimeFechaUltimaActualizacionPagoParcial->diff($fechaAhora);
                        $intervalDiasPagoParcial                     = $dateTimeFechaPagoParcial->diff($fechaAhora);
                        $cantDiasPagoParcial                         = $intervalDiasPagoParcial->format('%a');
                        $ultimoRegistro                              = count($registro[$numeroOrdenPago]) - 1;

                        if ($intervalHoras->format('%a') > 0) {
                            $cantHorasPagoParcial = $intervalHoras->format('%a') * 24;
                        }

                        if ($intervalHoras->format('%h') > 0) {
                            $cantHorasPagoParcial += $intervalHoras->format('%h');
                        }

                        //mostrar PP
                        if ($cantDiasPagoParcial <= 30) {
                            $mostrarPagoParcial = true;
                        } else {
                            $mostrarPagoParcial = false;
                        }

                        //si PP no está Pagada
                        if (intval($pagosParciales[$key]['id_estado_orden_pago']) != 4) {

                            //si PP tiene estado 'Pendiente de pago'
                            if (intval($pagosParciales[$key]['id_estado_orden_pago']) == 3) {
                                $estadoComprobanteAux = 'Aprobada';
                            } else {
                                $estadoComprobanteAux = $pagosParciales[$key]['estado_pago'];
                            }

                        //cant horas desde última actualización
                        } elseif ($cantHorasPagoParcial <= 48) {

                            //si el pago es Creado entonces es Aprobada
                            if (intval($pagosParciales[$key]['id_estado_pago']) == 1) {
                                $estadoComprobanteAux = 'Aprobada';
                            } else {
                                $estadoComprobanteAux = $pagosParciales[$key]['estado_pago'];
                            }

                        } else {

                            //factura abierta
                            if ($mostrarComprobante) {
                                //decrementar saldo del grupo
                                $saldoGrupo -= $pagosParciales[$key]['saldo_comprobante'];
                            }

                            $estadoComprobanteAux = null;

                            $numeroOrdenPagoPagoParcial = str_pad($pagosParciales[$key]['numero_orden_pago'], 8, '0', STR_PAD_LEFT);

                            $registroPagoParcial = array(
                                'agrupador'        => $agrupador,
                                'idComprobante'    => $pagosParciales[$key]['id_comprobante'],
                                'tipo'             => $pagosParciales[$key]['tipo_comprobante'],
                                'discriminador'    => $pagosParciales[$key]['discriminador'],
                                'orden'            => $orden[$pagosParciales[$key]['tipo_comprobante']],
                                'numero'           => $numeroOrdenPagoPagoParcial,
                                'fechaComprobante' => $pagosParciales[$key]['fecha_orden_pago'],
                                'fechaIngreso'     => $pagosParciales[$key]['fecha_creacion_orden_pago'],
                                'idOrdenPago'      => $pagosParciales[$key]['id_orden_pago'],
                                'estado'           => $pagosParciales[$key]['estado_orden_pago'],
                                'saldo'            => $pagosParciales[$key]['saldo_comprobante'],
                                'url'              => true,
                                'mostrar'          => $mostrarPagoParcial);

                            //agregar PP
                            $registro[$numeroOrdenPago][] = $registroPagoParcial;
                        }

                        //actualizar estado comprobante
                        $registro[$numeroOrdenPago][$ultimoRegistro]['estado'] = $estadoComprobanteAux;

                    }

                    //buscar Anticipos Aplicados de cada comprobante por idComprobante
                    $keysAnticiposAplicados = array_keys(array_column($anticiposAplicados, 'id_comprobante'), $comprobantes[$row]['id_comprobante']);
                    foreach ($keysAnticiposAplicados as $key) {

                        //factura abierta
                        if ($mostrarComprobante) {
                            //decrementar saldo del grupo
                            $saldoGrupo -= $anticiposAplicados[$key]['total_comprobante'];
                        }

                        $anticiposAplicados = array(
                            'agrupador'        => $agrupador,
                            'idComprobante'    => $anticiposAplicados[$key]['id_comprobante'],
                            'tipo'             => $anticiposAplicados[$key]['tipo_comprobante'],
                            'discriminador'    => $anticiposAplicados[$key]['discriminador'],
                            'orden'            => $orden[$anticiposAplicados[$key]['tipo_comprobante']],
                            'numero'           => $anticiposAplicados[$key]['numero_comprobante'],
                            'fechaComprobante' => $anticiposAplicados[$key]['fecha_comprobante'],
                            'fechaIngreso'     => $comprobantes[$row]['fecha_ingreso_comprobante'],
                            'idOrdenPago'      => $anticiposAplicados[$key]['id_orden_pago'],
                            'estado'           => $anticiposAplicados[$key]['estado_orden_pago'],
                            'saldo'            => $anticiposAplicados[$key]['total_comprobante'],
                            'url'              => false,
                            'mostrar'          => $mostrarComprobante);

                        //agregar Anticipo Aplicado
                        $registro[$numeroOrdenPago][] = $anticiposAplicados;
                    }

                    $row++;
                }

                //si tiene OP
                if (intval($idOrdenPago) != 0) {

                    $tipoComprobante = 'Orden de pago';

                    //mostrar OP
                    if ($cantDiasOrdenPago <= 30) {
                        $mostrarOrdenPago = true;
                    } else {
                        $mostrarOrdenPago = false;
                    }

                    //si el comprobante no tiene estado (A la firma, A la orden, etc) y es una OP pagada, se agrega la OP
                    if ($estadoComprobante == null && intval($idEstadoOrdenPago) == 4) {

                        $registroOrdenPago = array(
                            'agrupador'        => $agrupador,
                            'idComprobante'    => null,
                            'tipo'             => $tipoComprobante,
                            'discriminador'    => $discriminador,
                            'orden'            => $orden[$tipoComprobante],
                            'numero'           => $numeroOrdenPago,
                            'fechaComprobante' => $fechaOrdenPago,
                            'fechaIngreso'     => $fechaCreacionOrdenPago,
                            'idOrdenPago'      => $idOrdenPago,
                            'estado'           => $estadoOrdenPago,
                            'totalOrdenPago'   => $totalOrdenPago,
                            'saldo'            => $totalOrdenPago,
                            'url'              => true,
                            'mostrar'          => $mostrarOrdenPago);

                        //agregar OP
                        $registro[$numeroOrdenPago][] = $registroOrdenPago;
                    }
                }

                $agrupador++;
            }

            $registros[$descripcion] = array(
                'saldo'       => $saldoGrupo,
                'mostrar'     => $mostrarSaldo,
                'descripcion' => $descripcion,
                'ordenesPago' => $registro);

            $saldoGrupo     = 0;
            $saldoOrdenPago = 0;
        }

        return $registros;
    }
}
