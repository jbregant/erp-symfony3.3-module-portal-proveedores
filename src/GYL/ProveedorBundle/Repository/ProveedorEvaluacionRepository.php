<?php

namespace GYL\ProveedorBundle\Repository;

use GYL\ProveedorBundle\Controller\RepresentanteApoderadoController;
use GYL\ProveedorBundle\Entity\BackupUserData;
use GYL\ProveedorBundle\Entity\ProveedorActividad;
use GYL\ProveedorBundle\Entity\ProveedorDatoPersonal;
use GYL\ProveedorBundle\Entity\ProveedorRepresentanteApoderado;
use GYL\ProveedorBundle\Entity\ProveedorRubro;
use Symfony\Component\Security\Acl\Exception\Exception;

/**
 * ProveedorEvaluacionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProveedorEvaluacionRepository extends \Doctrine\ORM\EntityRepository
{
    public function setRowBackupxIdDatoPersonal($idDatoPersonal)
    {
        $em  = $this->getEntityManager('adif_proveedores');
        $repoProvDatoPersonal = $em->getRepository(ProveedorDatoPersonal::class)->findOneBy(['id' => $idDatoPersonal]);

        $backupRepo = $em->getRepository(BackupUserData::class)->findOneBy(['idDatoPersonal' => $idDatoPersonal, 'fechaBaja' => null]);

        if ($backupRepo instanceof BackupUserData){
            $em->remove($backupRepo);
            $em->flush();
        }

        $tablas = ['proveedor_dato_personal', 'proveedor_actividad', 'proveedor_dato_bancario', 'proveedor_dato_contacto', 'proveedor_dato_gcshm', 'proveedor_dato_impositivo', 'proveedor_declaracion_jurada', 'proveedor_domicilio',
            'proveedor_documentacion', 'proveedor_persona_juridica_miembros', 'proveedor_representante_apoderado', 'proveedor_rubro', 'proveedor_ute', 'proveedor_ute_miembros', 'proveedor_timeline'];

        $arrayAux = [];

        $em  = $this->getEntityManager('adif_proveedores');

        foreach($tablas as $tabla){
            if($tabla!="proveedor_ute_miembros")
            {
                $sql = "select * from {$tabla} where id_proveedor_dato_personal = :id";
                if($tabla == 'proveedor_dato_personal')
                    $sql = "select * from {$tabla} where id = :id";

                $stmt = $em->getConnection()->prepare($sql);
                $stmt->bindValue('id', $idDatoPersonal);
                $stmt->execute();
                $result = $stmt->fetchAll();
                $arrayAux[] = [$tabla => $result];
            }
        }

        $backup = new BackupUserData();
        $backup->setIdDatoPersonal($repoProvDatoPersonal);
        $backup->setBackupData(json_encode($arrayAux));

        $em->persist($backup);
        $em->flush();
    }

    public function rollBackRowBackupxIdDatoPersonal($idDatoPersonal)
    {
        $em  = $this->getEntityManager('adif_proveedores');

        $backupRepo = $em->getRepository(BackupUserData::class)->findOneBy(['idDatoPersonal' => $idDatoPersonal, 'fechaBaja' => null]);
        $backupData = json_decode($backupRepo->getBackupData());


        //borrar datos de representantes/rubros/actividades para evitar inconsistencias
        $representantes = $em->getRepository(ProveedorRepresentanteApoderado::class)->findBy(['idDatoPersonal' => $idDatoPersonal]);
        $actividades = $em->getRepository(ProveedorActividad::class)->findBy(['idDatoPersonal' => $idDatoPersonal]);
        $rubros = $em->getRepository(ProveedorRubro::class)->findBy(['idDatoPersonal' => $idDatoPersonal]);

        if(!empty($representantes)){
            foreach ($representantes as $representante) {
                $em->remove($representante);
                $em->flush();
            }

        }

        if(!empty($actividades)){
            foreach ($actividades as $actividad) {
                $em->remove($actividad);
                $em->flush();
            }
        }

        if(!empty($rubros)){
            foreach ($rubros as $rubro) {
                $em->remove($rubro);
                $em->flush();
            }
        }

        foreach ($backupData as $backupDatums) {
            $tableName = key($backupDatums);
            foreach ($backupDatums as $backupDatum){
                foreach ($backupDatum as $item){
                    switch ($tableName){
                        case 'proveedor_dato_personal':
                            $this->rollBackProveedorDatoPersonal($tableName,$item);
                            break;
                        case 'proveedor_actividad':
                            $this->rollBackProveedorActividad($tableName,$item);
                            break;
                        case 'proveedor_dato_bancario':
                            $this->rollBackProveedorDatoBancario($tableName,$item);
                            break;
                        case 'proveedor_dato_contacto':
                            $this->rollBackProveedorDatoContacto($tableName,$item);
                            break;
                        case 'proveedor_dato_gcshm':
                            $this->rollBackProveedorDatoGcshm($tableName,$item);
                            break;
                        case 'proveedor_dato_impositivo':
                            $this->rollBackProveedorDatoImpositivo($tableName,$item);
                            break;
                        case 'proveedor_declaracion_jurada':
                            $this->rollBackProveedorDeclaracionJurada($tableName,$item);
                            break;
                        case 'proveedor_documentacion':
                            $this->rollBackProveedorDocumentacion($tableName,$item);
                            break;
                        case 'proveedor_domicilio':
                            $this->rollBackProveedorDomicilio($tableName,$item);
                            break;
                        case 'proveedor_persona_juridica_miembros':
                            $this->rollBackProveedorPersonaJuridicaMiembros($tableName,$item);
                            break;
                        case 'proveedor_representante_apoderado':
                            $this->rollBackProveedorRepresentanteApoderado($tableName,$item);
                            break;
                        case 'proveedor_rubro':
                            $this->rollBackProveedorRubro($tableName,$item);
                            break;
                        case 'proveedor_ute':
                            $this->rollBackProveedorUte($tableName,$item);
                            break;
                        case 'proveedor_ute_miembros':
                            $this->rollBackProveedorUteMiembros($tableName,$item);
                            break;
                        case 'proveedor_timeline':
                            $this->rollBackProveedorTimeline($tableName,$item);
                            break;
                    }
                }
            }
        }
    }

    public function rollBackProveedorDatoPersonal($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, id_tipo_persona = :id_tipo_persona, id_tipo_persona_juridica = :id_tipo_persona_juridica, id_tipo_proveedor = :id_tipo_proveedor,
                nombre = :nombre, apellido = :apellido, tipo_documento = :tipo_documento, numero_documento = :numero_documento,
                cuit = :cuit, proveedor = :proveedor, extranjero = :extranjero,
                razon_social = :razon_social, numero_id_tributaria = :numero_id_tributaria, id_pais_radicacion = :id_pais_radicacion,
                fecha_inicio_actividades = :fecha_inicio_actividades, email = :email, direccion_web = :direccion_web,
                proveedor_id = :proveedor_id, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('id_tipo_persona', $data->id_tipo_persona);
        $stmt->bindValue('id_tipo_persona_juridica', $data->id_tipo_persona_juridica);
        $stmt->bindValue('id_tipo_proveedor', $data->id_tipo_proveedor);
        $stmt->bindValue('nombre', $data->nombre);
        $stmt->bindValue('apellido', $data->apellido);
        $stmt->bindValue('tipo_documento', $data->tipo_documento);
        $stmt->bindValue('numero_documento', $data->numero_documento);
        $stmt->bindValue('cuit', $data->cuit);
        $stmt->bindValue('proveedor', $data->proveedor);
        $stmt->bindValue('extranjero', $data->extranjero);
        $stmt->bindValue('razon_social', $data->razon_social);
        $stmt->bindValue('numero_id_tributaria', $data->numero_id_tributaria);
        $stmt->bindValue('id_pais_radicacion', $data->id_pais_radicacion);
        $stmt->bindValue('fecha_inicio_actividades', $data->fecha_inicio_actividades);
        $stmt->bindValue('email', $data->email);
        $stmt->bindValue('direccion_web', $data->direccion_web);
        $stmt->bindValue('proveedor_id', $data->proveedor_id);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorActividad($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, id_usuario_creacion = :id_usuario_creacion, exportacion_bienes = :exportacion_bienes, prestacion_servicios = :prestacion_servicios,
                fecha_baja = :fecha_baja, id_tipo_actividad = :id_tipo_actividad, prestacion_servicio_numero = :prestacion_servicio_numero, prestacion_servicio_regimen = :prestacion_servicio_regimen,
                prestacion_servicio_porcentaje_excension = :prestacion_servicio_porcentaje_excension, prestacion_servicio_fecha_desde = :prestacion_servicio_fecha_desde, prestacion_servicio_fecha_hasta = :prestacion_servicio_fecha_hasta,
                convenio_unilateral = :convenio_unilateral, convenio_unilateral_aplicacion_caba = :convenio_unilateral_aplicacion_caba, convenio_unilateral_aplicacion_grupo = :convenio_unilateral_aplicacion_grupo,
                tipo_prestacion_asistencia_tecnica = :tipo_prestacion_asistencia_tecnica, tipo_prestacion_otros = :tipo_prestacion_otros, convenio_tributacion_internacional = :convenio_tributacion_internacional,
                establecimiento_argentina = :establecimiento_argentina, articulo_de_convenio_aplicable = :articulo_de_convenio_aplicable WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('id_usuario_creacion', $data->id_usuario_creacion);
        $stmt->bindValue('exportacion_bienes', $data->exportacion_bienes);
        $stmt->bindValue('prestacion_servicios', $data->prestacion_servicios);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id_tipo_actividad', $data->id_tipo_actividad);
        $stmt->bindValue('prestacion_servicio_numero', $data->prestacion_servicio_numero);
        $stmt->bindValue('prestacion_servicio_regimen', $data->prestacion_servicio_regimen);
        $stmt->bindValue('prestacion_servicio_porcentaje_excension', $data->prestacion_servicio_porcentaje_excension);
        $stmt->bindValue('prestacion_servicio_fecha_desde', $data->prestacion_servicio_fecha_desde);
        $stmt->bindValue('prestacion_servicio_fecha_hasta', $data->prestacion_servicio_fecha_hasta);
        $stmt->bindValue('convenio_unilateral', $data->convenio_unilateral);
        $stmt->bindValue('convenio_unilateral_aplicacion_caba', $data->convenio_unilateral_aplicacion_caba);
        $stmt->bindValue('convenio_unilateral_aplicacion_grupo', $data->convenio_unilateral_aplicacion_grupo);
        $stmt->bindValue('tipo_prestacion_asistencia_tecnica', $data->tipo_prestacion_asistencia_tecnica);
        $stmt->bindValue('tipo_prestacion_otros', $data->tipo_prestacion_otros);
        $stmt->bindValue('convenio_tributacion_internacional', $data->convenio_tributacion_internacional);
        $stmt->bindValue('establecimiento_argentina', $data->establecimiento_argentina);
        $stmt->bindValue('articulo_de_convenio_aplicable', $data->articulo_de_convenio_aplicable);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDatoBancario($table, $data){
        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, cuenta_local = :cuenta_local, id_entidad_bancaria = :id_entidad_bancaria, sucursal_bancaria = :sucursal_bancaria,
                numero_sucursal = :numero_sucursal, cbu = :cbu, numero_cuenta = :numero_cuenta, swift = :swift, id_tipo_moneda = :id_tipo_moneda, localidad_extranjero = :localidad_extranjero,
                aba = :aba, iban = :iban, beneficiario = :beneficiario, banco_corresponsal = :banco_corresponsal, swift_banco_corresponsal = :swift_banco_corresponsal, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('cuenta_local', $data->cuenta_local);
        $stmt->bindValue('id_entidad_bancaria', $data->id_entidad_bancaria);
        $stmt->bindValue('sucursal_bancaria', $data->sucursal_bancaria);
        $stmt->bindValue('numero_sucursal', $data->numero_sucursal);
        $stmt->bindValue('cbu', $data->cbu);
        $stmt->bindValue('numero_cuenta', $data->numero_cuenta);
        $stmt->bindValue('swift', $data->swift);
        $stmt->bindValue('id_tipo_moneda', $data->id_tipo_moneda);
        $stmt->bindValue('localidad_extranjero', $data->localidad_extranjero);
        $stmt->bindValue('aba', $data->aba);
        $stmt->bindValue('iban', $data->iban);
        $stmt->bindValue('beneficiario', $data->beneficiario);
        $stmt->bindValue('banco_corresponsal', $data->banco_corresponsal);
        $stmt->bindValue('swift_banco_corresponsal', $data->swift_banco_corresponsal);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDatoContacto($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, nombre = :nombre, apellido = :apellido, posicion = :posicion, area = :area, telefono = :telefono, 
                fecha_baja = :fecha_baja, email = :email WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('nombre', $data->nombre);
        $stmt->bindValue('apellido', $data->apellido);
        $stmt->bindValue('posicion', $data->posicion);
        $stmt->bindValue('area', $data->area);
        $stmt->bindValue('telefono', $data->telefono);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('email', $data->email);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDatoGcshm($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, certificacion_iso9001 = :certificacion_iso9001, certificacion_iso14001 = :certificacion_iso14001, certificacion_osha18001 = :certificacion_osha18001,
                permisos_ambientales = :permisos_ambientales, documentacion_evaluacion = :documentacion_evaluacion, organigrama_institucional_obra = :organigrama_institucional_obra, pese = :pese WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('certificacion_iso9001', $data->certificacion_iso9001);
        $stmt->bindValue('certificacion_iso14001', $data->certificacion_iso14001);
        $stmt->bindValue('certificacion_osha18001', $data->certificacion_osha18001);
        $stmt->bindValue('permisos_ambientales', $data->permisos_ambientales);
        $stmt->bindValue('documentacion_evaluacion', $data->documentacion_evaluacion);
        $stmt->bindValue('organigrama_institucional_obra', $data->organigrama_institucional_obra);
        $stmt->bindValue('pese', $data->pese);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDatoImpositivo($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, id_proveedor_iva = :id_proveedor_iva, id_proveedor_suss = :id_proveedor_suss, id_proveedor_ganancias = :id_proveedor_ganancias, id_proveedor_iibb = :id_proveedor_iibb,
                cae = :cae, cai = :cai, otros = :otros, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('id_proveedor_iva', $data->id_proveedor_iva);
        $stmt->bindValue('id_proveedor_suss', $data->id_proveedor_suss);
        $stmt->bindValue('id_proveedor_ganancias', $data->id_proveedor_ganancias);
        $stmt->bindValue('id_proveedor_iibb', $data->id_proveedor_iibb);
        $stmt->bindValue('cae', $data->cae);
        $stmt->bindValue('cai', $data->cai);
        $stmt->bindValue('otros', $data->otros);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDeclaracionJurada($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, acepta = :acepta, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('acepta', $data->acepta);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDocumentacion($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, id_tipo_documentacion = :id_tipo_documentacion, path = :path, public_filename = :public_filename, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('id_tipo_documentacion', $data->id_tipo_documentacion);
        $stmt->bindValue('path', $data->path);
        $stmt->bindValue('public_filename', $data->public_filename);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorDomicilio($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :idusuario, id_tipo_domicilio = :id_tipo_domicilio, id_localidad = :id_localidad, codigo_postal = :codigo_postal, calle = :calle,
                provincia_estado_exterior = :provincia_estado_exterior, piso = :piso, id_pais = :id_pais, id_provincia = :id_provincia, departamento = :departamento, telefono = :telefono,
                fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('id_tipo_domicilio', $data->id_tipo_domicilio);
        $stmt->bindValue('id_localidad', $data->id_localidad);
        $stmt->bindValue('codigo_postal', $data->codigo_postal);
        $stmt->bindValue('calle', $data->calle);
        $stmt->bindValue('provincia_estado_exterior', $data->provincia_estado_exterior);
        $stmt->bindValue('piso', $data->piso);
        $stmt->bindValue('id_pais', $data->id_pais);
        $stmt->bindValue('id_provincia', $data->id_provincia);
        $stmt->bindValue('departamento', $data->departamento);
        $stmt->bindValue('telefono', $data->telefono);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorPersonaJuridicaMiembros($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET  cuit = :cuit, nombre = :nombre, apellido = :apellido, participacion = :participacion,
                provincia_estado_exterior = :provincia_estado_exterior, piso = :piso, id_pais = :id_pais, id_provincia = :id_provincia, departamento = :departamento, telefono = :telefono,
                fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('cuit', $data->cuit);
        $stmt->bindValue('nombre', $data->nombre);
        $stmt->bindValue('apellido', $data->apellido);
        $stmt->bindValue('participacion', $data->participacion);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorRepresentanteApoderado($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET id_usuario = :id_usuario, nombre = :nombre, apellido = :apellido, cuit_cuil = :cuit_cuil, numero_documento = :numero_documento,
                fecha_designacion = :fecha_designacion, representante = :representante, apoderado = :apoderado, poder_judicial = :poder_judicial, bancario = :bancario, adm_especial = :adm_especial,
                adm_general = :adm_general,  id_tipo_documento = :id_tipo_documento, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('id_usuario', $data->id_usuario);
        $stmt->bindValue('nombre', $data->nombre);
        $stmt->bindValue('apellido', $data->apellido);
        $stmt->bindValue('cuit_cuil', $data->cuit_cuil);
        $stmt->bindValue('numero_documento', $data->numero_documento);
        $stmt->bindValue('fecha_designacion', $data->fecha_designacion);
        $stmt->bindValue('representante', $data->representante);
        $stmt->bindValue('apoderado', $data->apoderado);
        $stmt->bindValue('poder_judicial', $data->poder_judicial);
        $stmt->bindValue('bancario', $data->bancario);
        $stmt->bindValue('adm_especial', $data->adm_especial);
        $stmt->bindValue('adm_general', $data->adm_general);
        $stmt->bindValue('id_tipo_documento', $data->id_tipo_documento);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorRubro($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET  id_usuario = :id_usuario, id_rubro_clase = :id_rubro_clase, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('id_usuario', $data->id_usuario);
        $stmt->bindValue('id_rubro_clase', $data->id_rubro_clase);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorUte($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET  id_usuario = :id_usuario, nombre = :nombre, apellido = :apellido, participacion = :participacion,
                provincia_estado_exterior = :provincia_estado_exterior, piso = :piso, id_pais = :id_pais, id_provincia = :id_provincia, departamento = :departamento, telefono = :telefono,
                fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('idusuario', $data->id_usuario);
        $stmt->bindValue('denominacion', $data->denominacion);
        $stmt->bindValue('fecha_constitucion', $data->fecha_constitucion);
        $stmt->bindValue('fecha_finalizacion', $data->fecha_finalizacion);
        $stmt->bindValue('numero_inscripcion', $data->numero_inscripcion);
        $stmt->bindValue('razon_social', $data->razon_social);
        $stmt->bindValue('url', $data->url);
        $stmt->bindValue('nombre_fantasia', $data->nombre_fantasia);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorUteMiembros($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET  id_ute = :id_ute, cuit = :cuit, razon_social = :razon_social, numero_inscripcion = :numero_inscripcion, participacion_ganancias = :participacion_ganancias,
                participacion_remunerativa = :participacion_remunerativa, empleador = :empleador, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('id_ute', $data->id_ute);
        $stmt->bindValue('cuit', $data->cuit);
        $stmt->bindValue('razon_social', $data->razon_social);
        $stmt->bindValue('numero_inscripcion', $data->numero_inscripcion);
        $stmt->bindValue('participacion_ganancias', $data->participacion_ganancias);
        $stmt->bindValue('participacion_remunerativa', $data->participacion_remunerativa);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }

    public function rollBackProveedorTimeline($table, $data){

        $em  = $this->getEntityManager('adif_proveedores');

        $sql = "UPDATE adif_proveedores.{$table} SET  id_denominacion = :id_denominacion, id_usuario = :id_usuario, status = :status, id_status = :id_status, fecha_baja = :fecha_baja WHERE id = :id;";

        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue('id_denominacion', $data->id_denominacion);
        $stmt->bindValue('id_usuario', $data->id_usuario);
        $stmt->bindValue('status', $data->status);
        $stmt->bindValue('id_status', $data->id_status);
        $stmt->bindValue('fecha_baja', $data->fecha_baja);
        $stmt->bindValue('id', $data->id);
        $stmt->execute();
    }
}